#1.PCA를 통한 차원축소

#data load
data1 = iris
head(data1,3)

#정규화 및 데이터 정리
log.ir = log(data1[,1:4])
ir.species=data1[,5] 

#PCA
ir.pca = princomp(log.ir, center=T, scale=T, loadings=T)
plot(ir.pca, type= "l")
summary(ir.pca, loadings=T)

#2차원으로 축소 확인
biplot(ir.pca)

#다른 package 사용하여 2차원으로 축소 확인

install.packages("ggplot2")
install_github("vqv/ggbiplot") #Attempts to install a package directly from GitHub
library(ggbiplot)

g= ggbiplot(ir.pca, obs.scale=1,var.scale=1,groups=ir.species,ellipse=T,circle=T)
g

#3차원으로 축소 확인
install.packages("rgl")
library(rgl)
plot3d(ir.pca$scores[,1:3], col=as.integer(iris$Species)+1)

#------------------------------------------------------------------------
#2

#data load

data2= read.csv("~/EnergyEfficiency2.csv")
head(data2)

#정규성 검정
i=1
while(i<9){print(i)
  print(shapiro.test(data2[,i])) 
  i=i+1}

#표준화
EE.data=as.data.frame(scale(data2[,1:8], center=T, scale=T))

#Train data , Test data 나누기 및 데이터 정리
EE.data.Train=EE.data[1:620,]
EE.data.Test=EE.data[621:768,]

EE.HeatingLoadTrain=EE.data.Train[,8]
EE.HeatingLoadTest=EE.data.Test[,8]

EE.eval.Test=data2[621:768,9]

head(EE.data.Train)

# Correlation analysis
cor(EE.data.Train[,1:7])
pairs( ~ RelativeCompactness + SurfaceArea + WallArea+RoofArea + OverallHeight + GlazingArea + GlazingAreaDistribution, data = EE.data.Train[,1:7])

#PCA
EE.pca = princomp(EE.data.Train[,1:7], center=T, scale=T, loadings=T)
plot(EE.pca, type= "l")
summary(EE.pca, loadings=T)

#PCA결과 중 PC4까지 이용해 새로운 데이터를 만들어낸다.
PCA.data.Train=as.matrix(EE.data.Train[,1:7])%*%EE.pca$loadings[,1:4]
new.PCA.data.Train=cbind(as.data.frame(EE.HeatingLoadTrain),as.data.frame(PCA.data.Train))
head(new.PCA.data.Train)

PCA.data.Test=as.matrix(EE.data.Test[,1:7])%*%EE.pca$loadings[,1:4]
new.PCA.data.Test=cbind(as.data.frame(EE.HeatingLoadTest),as.data.frame(PCA.data.Test))
head(new.PCA.data.Test)

# 위에서 PCA로 바꿔준 Train data의 PC1~PC4를 이용해 회귀분석한다.
fit = lm(EE.HeatingLoadTrain~Comp.1+Comp.2+Comp.3+Comp.4,data=new.PCA.data.Train)
summary(fit)

#이렇게 만든 회귀식의예측력이 얼마나 좋은지 Test데이터를 통해 예측해본다.
fit_pred = predict(fit,newdata=new.PCA.data.Test)
head(fit_pred)

#데이터정리
b = as.matrix(fit_pred)
head(b)
for(i in 1:148){ 
  if (b[i,1]< -0.729){b[i,1]=1} 
  else if (-0.729 < b[i,1] && b[i,1] < 0.761){b[i,1]=2}
  else{b[i,1]=3}
}
a=EE.eval.Test

# 원래 데이터와 PCA 로 새롭게 정리한 데이터의 분류가 얼마나 비슷한지 확인한다.
table(b,a)
